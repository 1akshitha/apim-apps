/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.wso2.carbon.apimgt.impl.generated.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CertificateTierDTO implements org.apache.thrift.TBase<CertificateTierDTO, CertificateTierDTO._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CertificateTierDTO");

  private static final org.apache.thrift.protocol.TField TIER_FIELD_DESC = new org.apache.thrift.protocol.TField("tier", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SPIKE_ARREST_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("spikeArrestLimit", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SPIKE_ARREST_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("spikeArrestUnit", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STOP_ON_QUOTA_REACH_FIELD_DESC = new org.apache.thrift.protocol.TField("stopOnQuotaReach", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CertificateTierDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CertificateTierDTOTupleSchemeFactory());
  }

  public String tier; // optional
  public int spikeArrestLimit; // optional
  public String spikeArrestUnit; // optional
  public boolean stopOnQuotaReach; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIER((short)1, "tier"),
    SPIKE_ARREST_LIMIT((short)2, "spikeArrestLimit"),
    SPIKE_ARREST_UNIT((short)3, "spikeArrestUnit"),
    STOP_ON_QUOTA_REACH((short)4, "stopOnQuotaReach");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIER
          return TIER;
        case 2: // SPIKE_ARREST_LIMIT
          return SPIKE_ARREST_LIMIT;
        case 3: // SPIKE_ARREST_UNIT
          return SPIKE_ARREST_UNIT;
        case 4: // STOP_ON_QUOTA_REACH
          return STOP_ON_QUOTA_REACH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SPIKEARRESTLIMIT_ISSET_ID = 0;
  private static final int __STOPONQUOTAREACH_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.TIER,_Fields.SPIKE_ARREST_LIMIT,_Fields.SPIKE_ARREST_UNIT,_Fields.STOP_ON_QUOTA_REACH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIER, new org.apache.thrift.meta_data.FieldMetaData("tier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPIKE_ARREST_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("spikeArrestLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPIKE_ARREST_UNIT, new org.apache.thrift.meta_data.FieldMetaData("spikeArrestUnit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOP_ON_QUOTA_REACH, new org.apache.thrift.meta_data.FieldMetaData("stopOnQuotaReach", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CertificateTierDTO.class, metaDataMap);
  }

  public CertificateTierDTO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CertificateTierDTO(CertificateTierDTO other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTier()) {
      this.tier = other.tier;
    }
    this.spikeArrestLimit = other.spikeArrestLimit;
    if (other.isSetSpikeArrestUnit()) {
      this.spikeArrestUnit = other.spikeArrestUnit;
    }
    this.stopOnQuotaReach = other.stopOnQuotaReach;
  }

  public CertificateTierDTO deepCopy() {
    return new CertificateTierDTO(this);
  }

  @Override
  public void clear() {
    this.tier = null;
    setSpikeArrestLimitIsSet(false);
    this.spikeArrestLimit = 0;
    this.spikeArrestUnit = null;
    setStopOnQuotaReachIsSet(false);
    this.stopOnQuotaReach = false;
  }

  public String getTier() {
    return this.tier;
  }

  public CertificateTierDTO setTier(String tier) {
    this.tier = tier;
    return this;
  }

  public void unsetTier() {
    this.tier = null;
  }

  /** Returns true if field tier is set (has been assigned a value) and false otherwise */
  public boolean isSetTier() {
    return this.tier != null;
  }

  public void setTierIsSet(boolean value) {
    if (!value) {
      this.tier = null;
    }
  }

  public int getSpikeArrestLimit() {
    return this.spikeArrestLimit;
  }

  public CertificateTierDTO setSpikeArrestLimit(int spikeArrestLimit) {
    this.spikeArrestLimit = spikeArrestLimit;
    setSpikeArrestLimitIsSet(true);
    return this;
  }

  public void unsetSpikeArrestLimit() {
    __isset_bit_vector.clear(__SPIKEARRESTLIMIT_ISSET_ID);
  }

  /** Returns true if field spikeArrestLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetSpikeArrestLimit() {
    return __isset_bit_vector.get(__SPIKEARRESTLIMIT_ISSET_ID);
  }

  public void setSpikeArrestLimitIsSet(boolean value) {
    __isset_bit_vector.set(__SPIKEARRESTLIMIT_ISSET_ID, value);
  }

  public String getSpikeArrestUnit() {
    return this.spikeArrestUnit;
  }

  public CertificateTierDTO setSpikeArrestUnit(String spikeArrestUnit) {
    this.spikeArrestUnit = spikeArrestUnit;
    return this;
  }

  public void unsetSpikeArrestUnit() {
    this.spikeArrestUnit = null;
  }

  /** Returns true if field spikeArrestUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetSpikeArrestUnit() {
    return this.spikeArrestUnit != null;
  }

  public void setSpikeArrestUnitIsSet(boolean value) {
    if (!value) {
      this.spikeArrestUnit = null;
    }
  }

  public boolean isStopOnQuotaReach() {
    return this.stopOnQuotaReach;
  }

  public CertificateTierDTO setStopOnQuotaReach(boolean stopOnQuotaReach) {
    this.stopOnQuotaReach = stopOnQuotaReach;
    setStopOnQuotaReachIsSet(true);
    return this;
  }

  public void unsetStopOnQuotaReach() {
    __isset_bit_vector.clear(__STOPONQUOTAREACH_ISSET_ID);
  }

  /** Returns true if field stopOnQuotaReach is set (has been assigned a value) and false otherwise */
  public boolean isSetStopOnQuotaReach() {
    return __isset_bit_vector.get(__STOPONQUOTAREACH_ISSET_ID);
  }

  public void setStopOnQuotaReachIsSet(boolean value) {
    __isset_bit_vector.set(__STOPONQUOTAREACH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIER:
      if (value == null) {
        unsetTier();
      } else {
        setTier((String)value);
      }
      break;

    case SPIKE_ARREST_LIMIT:
      if (value == null) {
        unsetSpikeArrestLimit();
      } else {
        setSpikeArrestLimit((Integer)value);
      }
      break;

    case SPIKE_ARREST_UNIT:
      if (value == null) {
        unsetSpikeArrestUnit();
      } else {
        setSpikeArrestUnit((String)value);
      }
      break;

    case STOP_ON_QUOTA_REACH:
      if (value == null) {
        unsetStopOnQuotaReach();
      } else {
        setStopOnQuotaReach((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIER:
      return getTier();

    case SPIKE_ARREST_LIMIT:
      return Integer.valueOf(getSpikeArrestLimit());

    case SPIKE_ARREST_UNIT:
      return getSpikeArrestUnit();

    case STOP_ON_QUOTA_REACH:
      return Boolean.valueOf(isStopOnQuotaReach());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIER:
      return isSetTier();
    case SPIKE_ARREST_LIMIT:
      return isSetSpikeArrestLimit();
    case SPIKE_ARREST_UNIT:
      return isSetSpikeArrestUnit();
    case STOP_ON_QUOTA_REACH:
      return isSetStopOnQuotaReach();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CertificateTierDTO)
      return this.equals((CertificateTierDTO)that);
    return false;
  }

  public boolean equals(CertificateTierDTO that) {
    if (that == null)
      return false;

    boolean this_present_tier = true && this.isSetTier();
    boolean that_present_tier = true && that.isSetTier();
    if (this_present_tier || that_present_tier) {
      if (!(this_present_tier && that_present_tier))
        return false;
      if (!this.tier.equals(that.tier))
        return false;
    }

    boolean this_present_spikeArrestLimit = true && this.isSetSpikeArrestLimit();
    boolean that_present_spikeArrestLimit = true && that.isSetSpikeArrestLimit();
    if (this_present_spikeArrestLimit || that_present_spikeArrestLimit) {
      if (!(this_present_spikeArrestLimit && that_present_spikeArrestLimit))
        return false;
      if (this.spikeArrestLimit != that.spikeArrestLimit)
        return false;
    }

    boolean this_present_spikeArrestUnit = true && this.isSetSpikeArrestUnit();
    boolean that_present_spikeArrestUnit = true && that.isSetSpikeArrestUnit();
    if (this_present_spikeArrestUnit || that_present_spikeArrestUnit) {
      if (!(this_present_spikeArrestUnit && that_present_spikeArrestUnit))
        return false;
      if (!this.spikeArrestUnit.equals(that.spikeArrestUnit))
        return false;
    }

    boolean this_present_stopOnQuotaReach = true && this.isSetStopOnQuotaReach();
    boolean that_present_stopOnQuotaReach = true && that.isSetStopOnQuotaReach();
    if (this_present_stopOnQuotaReach || that_present_stopOnQuotaReach) {
      if (!(this_present_stopOnQuotaReach && that_present_stopOnQuotaReach))
        return false;
      if (this.stopOnQuotaReach != that.stopOnQuotaReach)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CertificateTierDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CertificateTierDTO typedOther = (CertificateTierDTO)other;

    lastComparison = Boolean.valueOf(isSetTier()).compareTo(typedOther.isSetTier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tier, typedOther.tier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpikeArrestLimit()).compareTo(typedOther.isSetSpikeArrestLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpikeArrestLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spikeArrestLimit, typedOther.spikeArrestLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpikeArrestUnit()).compareTo(typedOther.isSetSpikeArrestUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpikeArrestUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spikeArrestUnit, typedOther.spikeArrestUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopOnQuotaReach()).compareTo(typedOther.isSetStopOnQuotaReach());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopOnQuotaReach()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopOnQuotaReach, typedOther.stopOnQuotaReach);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CertificateTierDTO(");
    boolean first = true;

    if (isSetTier()) {
      sb.append("tier:");
      if (this.tier == null) {
        sb.append("null");
      } else {
        sb.append(this.tier);
      }
      first = false;
    }
    if (isSetSpikeArrestLimit()) {
      if (!first) sb.append(", ");
      sb.append("spikeArrestLimit:");
      sb.append(this.spikeArrestLimit);
      first = false;
    }
    if (isSetSpikeArrestUnit()) {
      if (!first) sb.append(", ");
      sb.append("spikeArrestUnit:");
      if (this.spikeArrestUnit == null) {
        sb.append("null");
      } else {
        sb.append(this.spikeArrestUnit);
      }
      first = false;
    }
    if (isSetStopOnQuotaReach()) {
      if (!first) sb.append(", ");
      sb.append("stopOnQuotaReach:");
      sb.append(this.stopOnQuotaReach);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CertificateTierDTOStandardSchemeFactory implements SchemeFactory {
    public CertificateTierDTOStandardScheme getScheme() {
      return new CertificateTierDTOStandardScheme();
    }
  }

  private static class CertificateTierDTOStandardScheme extends StandardScheme<CertificateTierDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CertificateTierDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tier = iprot.readString();
              struct.setTierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPIKE_ARREST_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spikeArrestLimit = iprot.readI32();
              struct.setSpikeArrestLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPIKE_ARREST_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spikeArrestUnit = iprot.readString();
              struct.setSpikeArrestUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STOP_ON_QUOTA_REACH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.stopOnQuotaReach = iprot.readBool();
              struct.setStopOnQuotaReachIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CertificateTierDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tier != null) {
        if (struct.isSetTier()) {
          oprot.writeFieldBegin(TIER_FIELD_DESC);
          oprot.writeString(struct.tier);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSpikeArrestLimit()) {
        oprot.writeFieldBegin(SPIKE_ARREST_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.spikeArrestLimit);
        oprot.writeFieldEnd();
      }
      if (struct.spikeArrestUnit != null) {
        if (struct.isSetSpikeArrestUnit()) {
          oprot.writeFieldBegin(SPIKE_ARREST_UNIT_FIELD_DESC);
          oprot.writeString(struct.spikeArrestUnit);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStopOnQuotaReach()) {
        oprot.writeFieldBegin(STOP_ON_QUOTA_REACH_FIELD_DESC);
        oprot.writeBool(struct.stopOnQuotaReach);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CertificateTierDTOTupleSchemeFactory implements SchemeFactory {
    public CertificateTierDTOTupleScheme getScheme() {
      return new CertificateTierDTOTupleScheme();
    }
  }

  private static class CertificateTierDTOTupleScheme extends TupleScheme<CertificateTierDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CertificateTierDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTier()) {
        optionals.set(0);
      }
      if (struct.isSetSpikeArrestLimit()) {
        optionals.set(1);
      }
      if (struct.isSetSpikeArrestUnit()) {
        optionals.set(2);
      }
      if (struct.isSetStopOnQuotaReach()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTier()) {
        oprot.writeString(struct.tier);
      }
      if (struct.isSetSpikeArrestLimit()) {
        oprot.writeI32(struct.spikeArrestLimit);
      }
      if (struct.isSetSpikeArrestUnit()) {
        oprot.writeString(struct.spikeArrestUnit);
      }
      if (struct.isSetStopOnQuotaReach()) {
        oprot.writeBool(struct.stopOnQuotaReach);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CertificateTierDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.tier = iprot.readString();
        struct.setTierIsSet(true);
      }
      if (incoming.get(1)) {
        struct.spikeArrestLimit = iprot.readI32();
        struct.setSpikeArrestLimitIsSet(true);
      }
      if (incoming.get(2)) {
        struct.spikeArrestUnit = iprot.readString();
        struct.setSpikeArrestUnitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stopOnQuotaReach = iprot.readBool();
        struct.setStopOnQuotaReachIsSet(true);
      }
    }
  }

}

