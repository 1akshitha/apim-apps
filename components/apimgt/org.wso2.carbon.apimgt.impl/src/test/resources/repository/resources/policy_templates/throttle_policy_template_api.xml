###################################  macros  #######################################
##
###generate key
#macro( getKey )##
#if($policy.getUserLevel() == $ACROSS_ALL)
str:concat('api_${policy.getPolicyName()}_all_','${pipeline}', '_', api_key ,'_key')##
#else
str:concat('api_${policy.getPolicyName()}_per_','${pipeline}', '_', api_key , '_', user_id ,'_key')##
#end
#end
###generate rule
#macro( getRule $policy)
#if($policy.getUserLevel() == $ACROSS_ALL)
api_${policy.getPolicyName()}_all_${pipeline}##
#else
api_${policy.getPolicyName()}_per_${pipeline}##
#end
#end
<policy tier="api_$policy.getPolicyName()" level="api" name="#getRule($policy)">
	<eligibilityQuery>
		FROM RequestStream
		SELECT '#getRule($policy)' AS rule, messageID, ( api_tier == '${policy.getPolicyName()}'$condition ) AS isEligible, false as isLocallyThrottled, #getKey() AS throttle_key
		INSERT INTO EligibilityStream; 
	</eligibilityQuery>
	<decisionQuery>	
#if($quotaPolicy != "")
		FROM EligibilityStream[isEligible==true AND rule == '#getRule($policy)']#window.time($quotaPolicy.getLimit().getUnitTime() $quotaPolicy.getLimit().getTimeUnit()) 
#if($quotaPolicy.getType() == $REQUEST_COUNT_TYPE)
		select throttle_key, (count(messageID) >= $quotaPolicy.getLimit().getRequestCount()) as isThrottled 
#else
		select throttle_key, (count(messageID) >= 1000) as isThrottled #########change {use $quotaPolicy.getLimit().getDataAmount()}
#end		
#if($policy.getUserLevel() == $PER_USER)
		group by throttle_key
#end
		INSERT ALL EVENTS into ResultStream;
#end
	</decisionQuery>
</policy>
