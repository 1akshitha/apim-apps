<%
include("/jagg/jagg.jag");

(function () {
    response.contentType = "text/plain; charset=UTF-8";
    var mod, obj, result, username,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json"),
            msg = require("/site/conf/ui-messages.jag");
    if (jagg.getUser() == null) {
        print({
                  error:true,
                  message:'AuthenticateError'
              });
    } else {
    if (action === "updateStatus" && request.getMethod() == 'POST') {
        mod = jagg.module("api");
        var apiData = {};
        apiData.provider= request.getParameter("provider","UTF-8");
        apiData.apiName = request.getParameter("name","UTF-8");
        apiData.version = request.getParameter("version");
        apiData.status = request.getParameter("status");
        apiData.publishToGateway = request.getParameter("publishToGateway");
        apiData.deprecateOldVersions = request.getParameter("deprecateOldVersions");
        var keyForward=request.getParameter("requireResubscription");
        if(keyForward!=null && keyForward){apiData.makeKeysForwardCompatible='false';}else{apiData.makeKeysForwardCompatible='true';}
        var userName = jagg.getUser().username;
        var APIManagerFactory = Packages.org.wso2.carbon.apimgt.impl.APIManagerFactory;
        var apiIdentifier = Packages.org.wso2.carbon.apimgt.api.model.APIIdentifier;
        var apiIdentifierObj = apiIdentifier(apiData.provider, apiData.apiName, apiData.version);
        result=APIManagerFactory.getInstance().getAPIProvider(userName).changeLifeCycleStatus(apiIdentifierObj, apiData.status,
                          Boolean(apiData.publishToGateway), Boolean(apiData.deprecateOldVersions), Boolean(apiData.makeKeysForwardCompatible));

        //var lcs = mod.getLifeCyclesEvents({provider:request.getParameter("provider"),name:request.getParameter("name"),version:request.getParameter("version")}).lcs;

        if (!result) {
            obj = {
                error:true,
                message:result.message
            };
        } else {
            obj = {
                error:false,
                lcs:"tt"
            }
        }
        print(obj);

    } else if (action === "isAPIOlderVersionExist") {
        mod = jagg.module("api");
        var apiData = {};
        apiData.provider= request.getParameter("provider");
        apiData.name = request.getParameter("name");
        apiData.version = request.getParameter("version");
        result = mod.isAPIOlderVersionExist(apiData);
        if (result.error==true) {
            obj = {
                error:true,
                message:result.message
            };
        } else {
            obj = result;
        }
        print(obj);

    }else {
        print({
                  error:true,
                  message:msg.error.invalidAction(action)
              });
    }
    }
}());
%>
