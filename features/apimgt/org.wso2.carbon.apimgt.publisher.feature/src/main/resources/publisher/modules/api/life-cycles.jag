<%
var APIManagerFactory = Packages.org.wso2.carbon.apimgt.impl.APIManagerFactory;
var user=jagg.getUser().username;
var log = new Log();
var apiIdentifier = Packages.org.wso2.carbon.apimgt.api.model.APIIdentifier;
var APIUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;

var updateAPIStatus = function (apiData) {
    var provider=APIUtil.replaceEmailDomain(apiData.provider);
    var apiIdentifierObj = apiIdentifier(provider, apiData.apiName, apiData.version);
    var result=APIManagerFactory.getInstance().getAPIProvider(user).changeLifeCycleStatus(apiIdentifierObj, apiData.status);

    if (log.isDebugEnabled()) {
        log.debug("updateAPIStatus : " + api.name + "-" + api.version);
    }

    return result;


};
var isAPIOlderVersionExist = function (api) {
    var log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        var exist = provider.isAPIOlderVersionExist(api);
        if (log.isDebugEnabled()) {
            log.debug("isAPIOlderVersionExist : " + api.name + "-" + api.version);
        }
        return {
                error:false,
                exist:exist
            };
        
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            exist:false,
            message:e.message.split(":")[1]

        };
    }
};

var getLifeCyclesEvents = function(api) {
    var log = new Log(),lc,lcs,length,list = [],
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        lcs = provider.getLifeCycleEvents(api);
        if (log.isDebugEnabled()) {
            log.debug("updateAPIStatus : " + api.name + "-" + api.version);
        }
        length = lcs.length;
        for (var i = 0; i < length; i++) {
            lc = lcs[i];
            list.push({
                          username:lc.username,
                          newStatus:lc.newStatus,
                          oldStatus:lc.oldStatus,
                          date:lc.date
                      });
        }
        return {
            error:false,
            lcs:list
        };

    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            lcs:null
        };
    }
}

var getAPILCData = function(api) {
    var provider=APIUtil.replaceEmailDomain(api.provider);
    var identifier = apiIdentifier(provider, api.name, api.version);
    var result=APIManagerFactory.getInstance().getAPIProvider(user).getAPILifeCycleData(identifier);
    var json = APIUtil.convertToString(result);
    var lcJSON = {};
    if ( json != null ) {
    lcJSON = JSON.parse(json);
    }
    return lcJSON;
}

var setCheckListItemVal=function(apiData,checkListItemOrder,checkListItemVal){
    var provider=APIUtil.replaceEmailDomain(apiData.provider);
    var apiIdentifier = apiIdentifier(provider, apiData.apiName, apiData.version);
    return APIManagerFactory.getInstance().getAPIProvider(user).changeAPILCCheckListItems(apiIdentifier,
                                 checkListItemOrder,checkListItemVal);

}


%>
