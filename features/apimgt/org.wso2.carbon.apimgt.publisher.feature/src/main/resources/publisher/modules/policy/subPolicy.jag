<%
var log = new Log();
// adding appPolicy
var addSubPolicy = function (policy) {
    var policy = jsonToObject(policy);
    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);

        var subPolicy = jsonToObject(policy);

        apiProvider.addPolicy(subPolicy);
        log.info(subPolicy.toString());
        return {
            error: false
        };
    } catch (ex) {
        var errorMessage = "Error occurred while saving policy (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
}

// inserting json file data to ApiPolicy Object
var jsonToObject = function (policy) {

    try {
        var SubPolicy = Packages.org.wso2.carbon.apimgt.api.model.SubscriptionPolicy;
        var RequestCountLimit = Packages.org.wso2.carbon.apimgt.api.model.RequestCountLimit;
        var BandwidthLimit = Packages.org.wso2.carbon.apimgt.api.model.BandwidthLimit;
        var QuotaPolicy = Packages.org.wso2.carbon.apimgt.api.model.QuotaPolicy;

        // Extracting basic policy info
        var policyName = policy.policyName;
        var policyDescription = policy.policyDescription;
        var i = 0;    //to iterate through execution flows

        var subPolicyobj = new SubPolicy(policyName);
        subPolicyobj.setDescription(policyDescription);

        //default quota policy details
        var defaultQuotaPolicyType = policy.defaultQuotaPolicy.type;
        var defaultRequestCount = policy.defaultQuotaPolicy.limit.requestCount;
        var defaultTimeUnit = policy.defaultQuotaPolicy.limit.timeUnit;
        var defaultDataAmount = policy.defaultQuotaPolicy.limit.dataAmount;
        var defaultDataUnit = policy.defaultQuotaPolicy.limit.dataUnit;

        var defaultQuotaPolicy = new QuotaPolicy();

        defaultQuotaPolicy.setType(quotaPolicyType);
        if (defaultQuotaPolicyType == "RequestCount") {
            var requestCountLimit = new RequestCountLimit();
            requestCountLimit.setRequestCount(defaultRequestCount);
            requestCountLimit.setTimeUnit(defaultTimeUnit);
            requestCountLimit.setUnitTime();
            defaultQuotaPolicy.setLimit(requestCountLimit);
        } else if (defaultQuotaPolicyType == "Bandwidth") {
            var bandwidthLimit = new BandwidthLimit();
            bandwidthLimit.setDataAmount(defaultDataAmount);
            bandwidthLimit.setDataUnit(defaultDataUnit);
            defaultQuotaPolicy.setLimit(bandwidthLimit);
        }
        appPolicyobj.setDefaultQuotaPolicy(defaultQuotaPolicy);
        return appPolicyobj;
    } catch (ex) {
        var errorMessage = "Error occurred while adding policy";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
};
%>