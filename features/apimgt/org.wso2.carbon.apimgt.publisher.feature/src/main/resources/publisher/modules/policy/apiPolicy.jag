<%

var log = new Log();
// adding apiPolicy
var addApiPolicy = function (policy) {
    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);
        var apiPolicy = jsonToObject(JSON.parse(policy));
        log.info(JSON.parse(policy));
        apiProvider.addPolicy(apiPolicy);
        return {
            error: false
        };
    } catch (ex) {
        var errorMessage = "Error occurred while saving policy (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
}

//removing api policy
var removeApiPolicy = function (policyName, userName, policyLevel) {

    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);

        apiProvider.removePolicy(policyName, userName, policyLevel);
        return {
            error: false
        };

    } catch (ex) {
        var errorMessage = "Error occurred while deleting the policy (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }

}

//update api policy
var updateApiPolicy = function (policy) {

    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);

        var updatedPolicy = jsonToObject(policy);
        apiProvider.updatePolicy(policy);
        return {
            error: false
        };

    } catch (ex) {
        var errorMessage = "Error occurred while updating the policy (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }

}
// inserting json file data to ApiPolicy Object
var jsonToObject = function (policy) {

    try {

        var APIPolicy = Packages.org.wso2.carbon.apimgt.api.model.policy.APIPolicy;
        var IPCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.IPCondition;
        var IPRangeCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.IPRangeCondition;
        var DateCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.DateCondition;
        var DateRangeCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.DateRangeCondition;
        var HeaderCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.HeaderCondition;
        var HTTPVerbCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.HTTPVerbCondition;
        var JWTClaimsCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.JWTClaimsCondition;
        var QueryParameterCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.QueryParameterCondition;
        var Limit = Packages.org.wso2.carbon.apimgt.api.model.policy.Limit;
        var RequestCountLimit = Packages.org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit;
        var BandwidthLimit = Packages.org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit;
        var Pipeline = Packages.org.wso2.carbon.apimgt.api.model.policy.Pipeline;
        var QuotaPolicy = Packages.org.wso2.carbon.apimgt.api.model.policy.QuotaPolicy;
        var ArrayList = Packages.java.util.ArrayList;
        // Extracting basic policy info
        var policyName = policy.policyName;
        var policyLevel = policy.policyLevel;
        var policyDescription = policy.policyDescription;
        var i = 0;    //to iterate through execution flows
        var pipeline = policy.executionFlows;
        var apiPolicyobj = new APIPolicy(policyName);
        apiPolicyobj.setUserLevel(policyLevel);
        apiPolicyobj.setDescription(policyDescription);
        //exract pipeline info
        while (pipeline[i]) {

            var pipe = new Pipeline();
            var quotaPolicy = new QuotaPolicy();
            var limit = new Limit();
            var requestCountLimit = new RequestCountLimit();
            var bandwidthLimit = new BandwidthLimit();
            var enabled = pipeline[i].enabled;
            var quotaPolicyType = pipeline[i].quotaPolicy.type;

            var requestCount = pipeline[i].quotaPolicy.limit.requestCount;
            var timeUnit = pipeline[i].quotaPolicy.limit.timeUnit;
            var dataAmount = pipeline[i].quotaPolicy.limit.dataAmount;
            var dataUnit = pipeline[i].quotaPolicy.limit.dataUnit;

            var id = pipeline[i].id;

            var conditionsList = new ArrayList();

            pipe.setEnabled(enabled);

            quotaPolicy.setType(quotaPolicyType);

            if (quotaPolicyType == "requestCount") {
                requestCountLimit = new RequestCountLimit();
                requestCountLimit.setRequestCount(requestCount);
                requestCountLimit.setTimeUnit(timeUnit);
                quotaPolicy.setLimit(requestCountLimit);
            } else if (quotaPolicyType == "bandwidthVolume") {
                bandwidthLimit = new BandwidthLimit();
                bandwidthLimit.setDataAmount(dataAmount);
                bandwidthLimit.setDataUnit(dataUnit);
                quotaPolicy.setLimit(bandwidthLimit);
            }
            pipe.setQuotaPolicy(quotaPolicy);
            var j = 0;   //to iterate through conditions
            var condition = pipeline[i].conditions;
            var pipeLines = new ArrayList();

            //extract conditions within a pipeline
            while (condition[j]) {
                var type = condition[j].type;
                var invertCondition = condition[j].invertCondition;
                var conditionEnabled = condition[j].enabled;
                if (type == "IP") {
                    var ipType = condition[j].ipType;
                    var startingIP = condition[j].startingIP;
                    var endingIP = condition[j].endingIP;
                    var specificIP = condition[j].specificIP;
                    //check if the IP is specific
                    if (ipType == "specific") {

                        var ipSpecific = new IPCondition();
                        ipSpecific.setSpecificIP(specificIP);
                        ipSpecific.setInvertCondition(invertCondition);

                        ipSpecific.setConditionEnabled(conditionEnabled);
                        conditionsList.add(ipSpecific);
                    } else {  //if IP range is given
                        var ipRange = new IPRangeCondition();
                        ipRange.setStartingIP(startingIP);
                        ipRange.setEndingIP(endingIP);
                        ipRange.setInvertCondition(invertCondition);
                        ipRange.setConditionEnabled(conditionEnabled);
                        conditionsList.add(ipRange);
                    }
                } else if (type == "Date") {
                    var dateType = condition[j].dateType;
                    var startingDate = condition[j].startingDate;
                    var endingDate = condition[j].endingDate;
                    var specificDate = condition[j].specificDate;
                    //if the date is specific
                    if (dateType == "specific") {
                        var dateSpecific = new DateCondition();
                        dateSpecific.setSpecificDate(specificDate);
                        dateSpecific.setInvertCondition(invertCondition);
                        dateSpecific.setConditionEnabled(conditionEnabled);
                        conditionsList.add(dateSpecific);
                    } else { //id date range is given
                        var dateRange = new DateRangeCondition();
                        dateRange.setStartingDate(startingDate);
                        dateRange.setEndingDate(endingDate);
                        dateRange.setInvertCondition(invertCondition);
                        dateRange.setConditionEnabled(conditionEnabled);
                        conditionsList.add(dateRange);
                    }
                }
                else if (type == "JWTClaims") {
                    var jwtClaimsObj = new JWTClaimsCondition();
                    var hasValues = condition[j].hasValues;
                    jwtClaimsObj.setInvertCondition(invertCondition);
                    jwtClaimsObj.setConditionEnabled(enabled);
                    conditionsList.add(jwtClaimsObj);
                } else if (type == "Header") {
                    var headerObj = new HeaderCondition();
                    if (condition[j].keyValPairs.name) {
                        var headerName = condition[j].keyValPairs.name;
                    }
                    if (condition[j].keyValPairs.headerVal) {
                        var headerVal = condition[j].keyValPairs.value;
                    }
                    headerObj.setHeader(headerName);
                    headerObj.setValue(headerVal);
                    headerObj.setInvertCondition(invertCondition);
                    headerObj.setConditionEnabled(enabled);

                    conditionsList.add(headerObj);

                } else if (type == "HTTPVerb") {
                    var httpVerbObj = new HTTPVerbCondition();
                    var httpVerb = condition[j].httpVerb;
                    httpVerbObj.setHttpVerb(httpVerb);
                    httpVerbObj.setInvertCondition(invertCondition);
                    httpVerbObj.setConditionEnabled(enabled);
                    conditionsList.add(httpVerbObj);
                } else if (type == "QueryParam") {
                    var queryParamObj = new QueryParameterCondition();
                    var hasValues = condition[j].hasValues;
                    queryParamObj.setInvertCondition(invertCondition);
                    queryParamObj.setConditionEnabled(enabled);
                    conditionsList.add(queryParamObj);

                }
                j++;
            }
            //end of extracting conditions of a pipline
            //adding conditions to pipe
            pipe.setConditions(conditionsList);
            //adding pipe to pipelines object
            pipeLines.add(pipe);
            i++;
        }
        //end of pipeline info extracttion
        //adding pipelines to policy
        apiPolicyobj.setPipelines(pipeLines);

        //default quota policy details
        var defaultQuotaPolicy = new QuotaPolicy();
        var defaultQuotaPolicyType = policy.defaultQuotaPolicy.type;
        var defaultRequestCount = policy.defaultQuotaPolicy.limit.requestCount;
        var defaultTimeUnit = policy.defaultQuotaPolicy.limit.timeUnit;
        var defaultDataAmount = policy.defaultQuotaPolicy.limit.dataAmount;
        var defaultDataUnit = policy.defaultQuotaPolicy.limit.dataUnit;
        defaultQuotaPolicy.setType(defaultQuotaPolicyType);
        if (defaultQuotaPolicyType == "requestCount") {
            requestCountLimit = new RequestCountLimit();
            requestCountLimit.setRequestCount(defaultRequestCount);
            requestCountLimit.setTimeUnit(defaultTimeUnit);
            defaultQuotaPolicy.setLimit(requestCountLimit);
        } else if (defaultQuotaPolicyType == "bandwidthVolume") {
            bandwidthLimit = new BandwidthLimit();
            bandwidthLimit.setDataAmount(defaultDataAmount);
            bandwidthLimit.setDataUnit(defaultDataUnit);
            defaultQuotaPolicy.setLimit(bandwidthLimit);
        }
        apiPolicyobj.setDefaultQuotaPolicy(defaultQuotaPolicy);
        return apiPolicyobj;
    } catch (ex) {
        var errorMessage = "Error occurred while adding policy";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
};
%>