<%
/*
 * Copyright (c) WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 Description: Invoke routed api endpoints
 Filename : assets.jag
 * can be extended by asset type

 ENDPOINTS:
 GET
 /apis/asts/swagger
 */

require('/modules/publisher.js').exec(function (ctx) {
	var log = new Log('asset_api_endpoints');
	var ref = require('utils').request;
	var responseProcessor = require('utils').response;
	var request = ctx.request;
	var server = require('store').server;
	var user = server.current(ctx.session);
	var username = user.username;
	var uriMatcher = new URIMatcher(req.getRequestURI());
	var UPDATE_LIFECYCLE_URL = '/{context}/asts/api/apis/lifecycle';
	var method = req.getMethod();
	var options = ref.getQueryOptions(req.getQueryString());
	var response = ctx.response;
	response.contentType = 'application/json';
	var constants = require("rxt").constants;
	log.info("Calling Life Cycle API");
	switch (method) {
		case 'POST':// GET endpoints
			options.type = req.getParameter('type');
			if (uriMatcher.match(UPDATE_LIFECYCLE_URL)) {//return assets by type
				var apiPublisher =  require('apipublisher').apipublisher;
				var apiProxy = apiPublisher.instance(username);
				var apiData = {};
				apiData.provider= request.getParameter("provider","UTF-8");
				apiData.apiName = request.getParameter("name","UTF-8");
				apiData.version = request.getParameter("version");
				apiData.status = request.getParameter("status");
				apiData.publishToGateway = request.getParameter("publishToGateway");
				apiData.deprecateOldVersions = request.getParameter("deprecateOldVersions");
				var keyForward=request.getParameter("requireResubscription");
				if(keyForward!=null && keyForward){apiData.makeKeysForwardCompatible='false';}else{apiData.makeKeysForwardCompatible='true';}
				result = apiProxy.updateAPIStatus(apiData);
				var lcs = mod.getLifeCyclesEvents({provider:request.getParameter("provider"),name:request.getParameter("name"),version:request.getParameter("version")}).lcs;
				if (result.error==true) {
					obj = {
						error:true,
						message:result.message
					};
				} else {
					obj = {
						error:false,
						lcs:lcs
					}
				}
				response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, obj);
			}  else {
				response = responseProcessor.buildErrorResponse(response,
																constants.STATUS_CODES.NOT_IMPLEMENTED,
																'Unable to locate this POST endpoint');
			}
			break;

		default://other un-implemented endpoints
			response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_IMPLEMENTED,
															'The endpoint that you have requested is not implemented for the ' + method +
															' method.Try making the request with the appropriate verb' +
															'(hint: create/update operations use POST).');
	}
}, request, response, session); %>
