<%
/*
 * Copyright (c) WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require('/modules/publisher.js').exec(function (ctx) {
	var log = new Log('asset_api_endpoints');
	var ref = require('utils').request;
	var responseProcessor = require('utils').response;
	var req = ctx.request;
	var server = require('store').server;
	var user = server.current(ctx.session);
	var username = user.username;
	var uriMatcher = new URIMatcher(req.getRequestURI());
	var GET_VALIDATION_URL = '/{context}/asts/api/apis/validation';
	var method = req.getMethod();
	var response = ctx.response;
	response.contentType = 'application/json';
	var constants = require("rxt").constants;
	switch (method) {
		case 'POST':// GET endpoints
			var apiPublisher = require('apipublisher').apipublisher;
			var apiProxy = apiPublisher.instance(username);
			var action = request.getParameter("action");
			if (uriMatcher.match(GET_VALIDATION_URL)) {//return assets by type
				if (action === "isAPINameExist") {
					var apiName = request.getParameter("apiName");
					result = apiProxy.isApiNameExist(apiName);
					if (result.error) {
						obj = {
							error: true,
							message: "Backend error occurred"
						};
					} else {
						obj = {
							error: false,
							exist: result.exist
						}
					}

					print(obj);

				} else if (action === "isContextExist") {
					var context = request.getParameter("context");
					var oldContext = request.getParameter("oldContext");
					result = apiProxy.isContextExist(context);
					if (result.error) {
						obj = {
							error: true,
							message: "Backend error occurred"
						};
					} else {
						obj = {
							error: false,
							exist: result.exist
						}
					}

					print(obj);

				} else if (action === "validateRoles") {
					var user = jagg.getUser().username;
					var roles = request.getParameter("roles");
					result = apiProxy.validateRoles(roles, user);
					if (result.error) {
						obj = {
							error: true,
							message: "Backend error occurred"
						};
					} else {
						obj = {
							error: false,
							response: result.valid
						}
					}

					print(obj);

				}

				else if (action === "isURLValid") {
					var type = request.getParameter("type");
					var url = request.getParameter("url");
					result = apiProxy.isURLValid(type, url);
					if (result.error) {
						obj = {
							error: true,
							status: 'error',
							message: "Backend error occurred"
						};
					} else {
						obj = {
							error: false,
							status: 'success',
							response: result.response
						}
					}
					print(obj);
				} else if (action === "getTiers") {
					result = apiProxy.getTiers();
					if (result.error) {
						obj = {
							error: true,
							message: "Backend error occurred"
						};
					} else {
						obj = {
							error: false,
							tiers: result.tiers
						}
					}
					print(obj);
				} else {
					response = responseProcessor.buildErrorResponse(response,
																	constants.STATUS_CODES.NOT_IMPLEMENTED,
																	'Unable to locate this POST endpoint');
				}
			}
			break;

		default://other un-implemented endpoints

			response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_IMPLEMENTED,
															'The endpoint that you have requested is not implemented for the ' + method +
															' method.Try making the request with the appropriate verb' +
															'(hint: create/update operations use POST).');
	}
}, request, response, session); %>



