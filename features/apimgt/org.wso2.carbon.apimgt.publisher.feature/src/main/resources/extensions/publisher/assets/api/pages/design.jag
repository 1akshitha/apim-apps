<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;
require('/modules/publisher.js').exec(function(ctx) {
	var log = new Log();
	log.info("DESIGN CALLED");
	var rxtModule = require('rxt');
	var carbon = require('carbon');
	var server = require('store').server;
	var user = server.current(ctx.session);
	var usr = carbon.server.tenantUser(user.username);
	var tenantDomain =  carbon.server.tenantDomain({tenantId: usr.tenantId});
	caramel = require('caramel');
	var am;
	var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
	var options = uriMatcher.match('/{context}/asts/{type}/{pageName}/{+id}') || uriMatcher.match('/{context}/asts/{type}/{pageName}');
	var page;
	var output;
	if (!options.id) {
		ctx.response.sendError(400, 'Cannot render the implementation details without an asset id');
		return;
	}
	am = asset.createUserAssetManager(ctx.session, options.type);
	try {
		asset = am.get(options.id);
	}
	catch(e){
		log.error(e);
		ctx.response.sendError(404,'Asset was not found');
		return;
	}
	var apiPublisher =  require('apipublisher').apipublisher;
	var apiProxy = apiPublisher.instance(ctx.username);
	var api = apiProxy.getAPI(asset.attributes.overview_provider, asset.attributes.overview_name, asset.attributes.overview_version).api;		
	page = rxtModule.ui.buildPage(ctx.session, ctx.request);
	output = am.render(asset,page)._custom();
	output.api=api;
	api.id = options.id;
	var public_visibility,private_visibility;
	//formatting visibility	
	if(api.visibility == 'public') {	    
		public_visibility = true;
	}
	if(api.visibility == 'private') {	    
		private_visibility = true;
	}
	
	output.public_visibility = public_visibility;
	output.private_visibility = private_visibility;	
	log.info(output);
	caramel.render(output);
}, request, response, session);
%>
