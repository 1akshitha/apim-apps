<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;
require('/modules/publisher.js').exec(function(ctx) {
	var log = new Log();
	var ui = require('rxt').ui;
	var carbon = require('carbon');
	var server = require('store').server;
	var user = server.current(ctx.session);
	var request = ctx.request;
	caramel = require('caramel');
	var am;
	var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
	var options = uriMatcher.match('/{context}/asts/{type}/{pageName}/{+id}') || uriMatcher.match('/{context}/asts/{type}/{pageName}');
	var page;
	var output;

	am = asset.createUserAssetManager(ctx.session, options.type);
	//Render page
	page = ui.buildPage(ctx.session, ctx.request);
	output = am.render(asset,page)._custom();

	var apiMetaData = {};
	output.apiMetaData = apiMetaData;
	var action = request.getParameter("action");
	if(options.id){
		try {
			asset = am.get(options.id);
		}
		catch(e){
			log.error(e);
			ctx.response.sendError(404,'Asset was not found');
			return;
		}

		var apiPublisher =  require('apipublisher').apipublisher;
		var apiProxy = apiPublisher.instance(user.username);
		var api = apiProxy.getAPI(asset.attributes.overview_provider, asset.attributes.overview_name, asset.attributes.overview_version).api;
		output.api = api;
		output.wsdl = api.wsdl;
		api.id = options.id;
		var public_visibility,private_visibility;
		//formatting visibility
		if(api.visibility == 'public') {
			public_visibility = true;
		}
		if(api.visibility == 'private') {
			private_visibility = true;
		}
		output.id=api.id;
		output.public_visibility = public_visibility;
		output.private_visibility = private_visibility;

	} else {
		if (request.getMethod() == 'POST' && (action === "start")) {
			var type = request.getParameter("type");
			var swagger = null;
			var wsdl = null;
			if(type == "rest"){
				var url = request.getParameter("swagger-url");
				var file = request.getFile("swagger-file");
				var import_type = request.getParameter("import-definition");
				if(import_type == "swagger-url" && url){
					url = url.trim();
					var data = { };
					var content = get(url, data ,"json");
					swagger = content.data;
				} else if(import_type == "swagger-file" && file){
					file.open("r");
					swagger = file.readAll();
					file.close();
				} else{
					var obj = require("/extensions/assets/api/config/default_swagger.json");
					swagger = stringify(obj);
				}
			} else if(type == "soap"){
				var url = request.getParameter("wsdl-url");
				var file = request.getFile("wsdl-file");
				var import_type = request.getParameter("import-definition");
				wsdl = "soap";
				if(url){
					wsdl = url.trim();
				}
			}

			if(swagger){
				session.put("swagger", swagger);
				output.apiMetaData.swaggerAvailable = true;
			} else {
				output.apiMetaData.swaggerAvailable = false;
			}

			if (wsdl) {
				output.apiMetaData.wsdl = wsdl;
			}
		}
	}

	//Check configurations specific properties
	var config = require('/extensions/assets/api/config/config.json');
	output.config = config;
	caramel.render(output);
}, request, response, session);
%>
