<%
/*
 *  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;

require('/modules/publisher.js').exec(function (ctx) {
    caramel = require('caramel');
    var log = new Log('pages_api_subsciptions: ');
    var ui = require('rxt').ui;
    var asset = require('rxt').asset;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var options = uriMatcher.match('/{context}/asts/{type}/{pageName}');
    var type = options.type;
    var am = asset.createUserAssetManager(ctx.session, type);
    var page = ui.buildPage(ctx.session, ctx.request);
    var output = am.render(page)._custom();
    var user = server.current(ctx.session);
    var usr = carbon.server.tenantUser(user.username);
    var tenantDomain = carbon.server.tenantDomain({tenantId: usr.tenantId});

    var apiPublisher = require('apipublisher').apipublisher;
    var apiProxy = apiPublisher.instance(user.username);


    var createApisJson = function (apiList) {
        var apiDataArr = [];
        var isNotHold = false;
        var isBlocked = false;
        var isProdOnly = false;

        if (apiList.indexOf(",") >= 0) {
            var apis = apiList.split(",");
            for (var n = 0; n < apis.length; n++) {
                api = apis[n].split("::");
                apiStatus = api[0];
                apiName = api[1];
                apiVersion = api[2];
                //log.info(apiStatus + ' ' + apiName + ' ' + apiVersion);

                if (apiStatus != "ON_HOLD") {
                    if (apiStatus == "UNBLOCKED" || apiStatus == "PROD_ONLY_BLOCKED" || apiStatus == "UNBLOCK") {
                        isNotHold = true;
                        isBlocked = false;
                        if (apiStatus == "PROD_ONLY_BLOCKED") {
                            isProdOnly = true;
                        } else {
                            isProdOnly = false;
                        }
                    } else {
                        isNotHold = true;
                        isBlocked = true;
                        isProdOnly = false;
                    }
                } else {
                    isNotHold = false;
                }

                apiDataArr.push({
                    "apiStatus": apiStatus,
                    "isBlocked": isBlocked,
                    "isProdOnly": isProdOnly,
                    "isNotHold": isNotHold,
                    "apiName": apiName,
                    "apiVersion": apiVersion
                });
            }
        } else {
            api = apiList.split("::");
            apiStatus = api[0];
            apiName = api[1];
            apiVersion = api[2];
            //log.info(apiStatus+ ' '+apiName + ' '+ apiVersion);

            if (apiStatus != "ON_HOLD") {
                if (apiStatus == "UNBLOCKED" || apiStatus == "PROD_ONLY_BLOCKED" || apiStatus == "UNBLOCK") {
                    isNotHold = true;
                    isBlocked = false;
                    if (apiStatus == "PROD_ONLY_BLOCKED") {
                        isProdOnly = true;
                    } else {
                        isProdOnly = false;
                    }
                } else {
                    isNotHold = true;
                    isBlocked = true;
                    isProdOnly = false;
                }
            } else {
                isNotHold = false;
            }

            apiDataArr.push({
                "apiStatus": apiStatus,
                "isBlocked": isBlocked,
                "isProdOnly": isProdOnly,
                "isNotHold": isNotHold,
                "apiName": apiName,
                "apiVersion": apiVersion
            });
        }
        return apiDataArr;
    };

    var apiSubDataResult = apiProxy.getAllAPIUsageByProvider(user.username);
    if (apiSubDataResult != null) {
        var apiSubData = JSON.parse(apiSubDataResult);
        for (var a in apiSubData) {
            var apisJson = createApisJson(apiSubData[a].apis);
            apiSubData[a].apis = apisJson;
        }
        output.apiSubscriptions = apiSubData;
    }

    caramel.render(output);
}, request, response, session);
%>