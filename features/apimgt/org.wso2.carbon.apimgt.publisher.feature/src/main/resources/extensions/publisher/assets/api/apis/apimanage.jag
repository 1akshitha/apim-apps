<%
/*
 * Copyright (c) WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 Description: Invoke routed api endpoints
 Filename : assets.jag
 * can be extended by asset type

 ENDPOINTS:
 GET
 /apis/asts/swagger
 */

require('/modules/publisher.js').exec(function (ctx) {
	var log = new Log('asset_api_endpoints');
	var ref = require('utils').request;
	var responseProcessor = require('utils').response;
	var res = ctx.response;
	var request = ctx.request;
	var server = require('store').server;
	var user = server.current(ctx.session);
	var username = user.username;
	var session = ctx.session;
	var uriMatcher = new URIMatcher(request.getRequestURI());
	var MANAGE_API_URL = '/{context}/asts/{type}/apis/apimanage/{id}';
	var method = request.getMethod();
	var options = ref.getQueryOptions(request.getQueryString());
	var response = ctx.response;
	// log.info("Calling Manage API" + username);
	var constants = require("rxt").constants;
	switch (method) {
		case 'POST':// GET endpoints
			options.type = request.getParameter('type');
			if (uriMatcher.match(MANAGE_API_URL)) {//return assets by type
				var apiPublisher =  require('apipublisher').apipublisher;
				var apiProxy = apiPublisher.instance(username);
				var action = request.getParameter("action");
				if(action == 'manage') {
					var apiData = {};
					apiData.apiName = request.getParameter("name", "UTF-8");
					apiData.version = request.getParameter("version");
					if (request.getParameter("provider") == null) {
						apiData.provider = username;
					} else {
						apiData.provider = request.getParameter("provider");
					}
					var apiId = {
						apiName : apiData.apiName,
						version : apiData.version,
						provider: apiData.provider
					};

					apiData.context = request.getParameter("context","UTF-8");
					apiData.defaultVersion=request.getParameter("default_version_checked");
					apiData.swagger = request.getParameter("swagger", "UTF-8");
					apiData.tier = request.getParameter("tiersCollection");
					if(request.getParameter("transport_http") == null && request.getParameter("transport_https") == null){
						apiData.transports = null;
					}
					else if(request.getParameter("transport_http") != null && request.getParameter("transport_https") != null) {
						apiData.transports=request.getParameter("transport_http")+","+request.getParameter("transport_https");

					}else if(request.getParameter("transport_http") != null){
						apiData.transports=request.getParameter("transport_http");
					}else{
						apiData.transports=request.getParameter("transport_https");
					}
					apiData.inSequence = request.getParameter("inSequence");
					apiData.outSequence= request.getParameter("outSequence");
					apiData.responseCache = request.getParameter("responseCache","UTF-8");
					apiData.subscriptionAvailability = request.getParameter("subscriptions");
					apiData.subscriptionTenants = request.getParameter("tenants","UTF-8");
					apiData.bizOwner = request.getParameter("bizOwner");
					apiData.bizOwnerMail = request.getParameter("bizOwnerMail");
					apiData.techOwner = request.getParameter("techOwner");
					apiData.techOwnerMail = request.getParameter("techOwnerMail");
					apiData.faultSequence = request.getParameter("faultSequence");
					apiData.responseCache = request.getParameter("responseCache","UTF-8");
					apiData.cacheTimeout= request.getParameter("cacheTimeout","UTF-8");
					apiData.destinationStats= request.getParameter("destinationStats","UTF-8");
					apiData.environments = request.getParameter("environments");
					// log.info("+++++++++++++++++++++++++++++++++++++++++++++++");
					apiProxy.manageAPI(apiData);
					// log.info("=============================================");
					// log.info(apiData);
					response = responseProcessor.buildSuccessResponse(response,
																	  constants.STATUS_CODES.OK, "Asset Updated " +
																								 "Successfully");
				}
			}  else {
				response = responseProcessor.buildErrorResponse(response,
																constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate ' +
																										'this POST ' +
																													 'endpoint');
			}
			break;

		default://other un-implemented endpoints
			response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_IMPLEMENTED,
															'The endpoint that you have requested is not implemented for the ' + method +
															' method.Try making the request with the appropriate verb' +
															'(hint: create/update operations use POST).');
	}
}, request, response, session); %>
