###################################  macros  #######################################
        ##
        ###generate key
        #macro( getKey )##
        str:concat('app_${policy.getPolicyName()}_', app_key,'_key')##
        #end
        ###generate rule
        #macro( getRule $policy)##
        app_${policy.getPolicyName()}##
        #end

        @Plan:name('app_${policy.getPolicyName()}')
        @Plan:description('ExecutionPlan for app_${policy.getPolicyName()}')
        @Import('org.wso2.throttle.request.stream:1.0.0')

        Define stream RequestStream (messageID string, app_key string, app_tier string, subscription_key string, subscription_tier string, resource_key string, resource_tier string, user_id string, propertiesMap string);

        @Export('GlobalThrottleStream:1.0.0')
        define stream GlobalThrottleStream (throttle_key string, isThrottled bool);

        FROM RequestStream
        SELECT 'app_${policy.getPolicyName()}' AS rule, messageID, (app_tier == '$policy.getPolicyName()') AS isEligible, app_key AS throttle_key
        INSERT INTO EligibilityStream;

        FROM EligibilityStream[isEligible==true AND rule == '$policy.getPolicyName()' ]#window.time($quotaPolicy.getLimit().getUnitTime() $quotaPolicy.getLimit().getTimeUnit())
        select throttle_key, (count(messageID) >= $quotaPolicy.getLimit().getRequestCount()) as isThrottled
        group by throttle_key
        INSERT ALL EVENTS into ResultStream;

        from ResultStream#throttler:emitOnStateChange(throttle_key, isThrottled)
        select *
        insert into GlobalThrottleStream;