<%
include("/jagg/jagg.jag");
var store = jagg.module("manager").getAPIStoreObj();
var ENVIRONMENT_NAME = "environmentName";
var ENVIRONMENT_TYPE = "environmentType";
var API_NAME = "apiName";
var API_VERSION = "apiVersion";
var API_PROVIDER = "apiProvider";

var tenantDomain = request.getParameter("tenant");
var resourceUrl = request.getParameter("resourceUrl");
var environmentName = request.getParameter(ENVIRONMENT_NAME);
var environmentType = request.getParameter(ENVIRONMENT_TYPE);

if (resourceUrl.indexOf("/documentation/files") != -1 ||
    resourceUrl.indexOf("/apimgt/applicationdata/wsdls") != -1 ) {

    if (environmentType != null && environmentName != null) {
        var apiName = request.getParameter(API_NAME);
        var apiVersion = request.getParameter(API_VERSION);
        var apiProvider = request.getParameter(API_PROVIDER);
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;
        var isWSDLDownload = request.getParameter("isWSDLDownload");
        var isFileDownload = request.getParameter("isFileDownload");
        if (isFileDownload == "true") {
            var resourceUrlCopy = resourceUrl;
            var resourceUrlArray = resourceUrl.split("/");
            if (resourceUrlArray.length >= 3) {
                var name = resourceUrlArray[1];
                var version = resourceUrlArray[2];
                apiProvider = String(APIUtil.getAPIProviderFromAPINameVersionTenant(name, version, tenantDomain));
                resourceUrl = org.wso2.carbon.apimgt.impl.APIConstants.REGISTRY_RESOURCE_URL_PREFIX + apiProvider + resourceUrlCopy;
            }
        }
        if (isWSDLDownload == "true" && apiName != null && apiVersion != null) {
            apiProvider = String(APIUtil.getAPIProviderFromAPINameVersionTenant(apiName, apiVersion, tenantDomain));
            resourceUrl = resourceUrl + "/" + APIUtil.createWsdlFileName(apiProvider, apiName, apiVersion);
        }
        if (jagg.getUser()) {
            var username = jagg.getUser().username;
        }
        var HashMap = Packages.java.util.HashMap;
        var apiAttributesMap = new HashMap();
        apiAttributesMap.put(API_NAME, apiName);
        apiAttributesMap.put(API_VERSION, apiVersion);
        apiAttributesMap.put(API_PROVIDER, apiProvider);
        var environmentDetails = new HashMap();
        environmentDetails.put(ENVIRONMENT_NAME, environmentName);
        environmentDetails.put(ENVIRONMENT_TYPE, environmentType);

        var apiConsumer = new Packages.org.wso2.carbon.apimgt.impl.APIConsumerImpl();
        var document = apiConsumer.getWSDLDocument(username, tenantDomain, resourceUrl, environmentDetails, apiAttributesMap);
        var object = JSON.parse(document);
    } else {
        var object = store.getDocument(tenantDomain, resourceUrl);
    }
}

if (object == null) {
    response.status = 500;
} else {
    response.contentType = "application/force-download";
    response.addHeader("Content-Disposition", "attachment; filename = \"" + object.name + "\"");
    if (resourceUrl.indexOf("wsdls/archives") != -1) {
        var file = new File("file:///" + object.Data);
        file.open("r");
        print(file.getStream());
        file.close();
        var FileUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIFileUtil;
        FileUtil.deleteParentDirectory(object.Data);
    } else {
        print(object.Data);
    }
}
%>