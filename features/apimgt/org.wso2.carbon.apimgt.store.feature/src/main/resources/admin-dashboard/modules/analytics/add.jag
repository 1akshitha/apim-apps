<%

var log = new Log();

var enableAnalytics = function (enable) {
    var carbon = require('carbon');
    var process = require('process');
    var url = 'https://' + process.getProperty('carbon.local.ip') + ':' + process.getProperty('mgt.transport.https.port') + '/admin/services/';
    var server = new carbon.server.Server(url);
    var options = {username: jagg.getUser().username, domain: carbon.server.tenantDomain() , tenantId:  carbon.server.tenantId()};
    var registry = new carbon.registry.Registry(server, options);
    var path = '/_system/governance/apimgt/applicationdata/analytics.xml';
    var ContentStr = registry.get(path);
    var conf = null;
    if (ContentStr != null) {
        var analytics_config = new XML(ContentStr.content);
        analytics_config.enable = enable;
        var resource = {
            content: analytics_config.toXMLString(),
            mediaType: 'text/xml'
        };
        log.info("Changing analytics status to - Enable:" + enable);
        registry.put(path, resource);
        log.info("Analytics status changed to - Enable:" + enable);
    }

    return {
        error:false
    };
};

var addAnalyticsConfig = function (configData) {

    var carbon = require('carbon');
    var process = require('process');
    var url =  'https://' + process.getProperty('carbon.local.ip') + ':' + process.getProperty('mgt.transport.https.port') + '/admin/services/';
    var server = new carbon.server.Server(url);
    var options = {username: jagg.getUser().username, domain: carbon.server.tenantDomain() , tenantId:  carbon.server.tenantId()};
    var registry = new carbon.registry.Registry(server, options);

    var path ='/_system/governance/apimgt/applicationdata/analytics.xml';

    var content = new XML("<analytics_config>" +
                          "<enable>" + true + "</enable>" +
                          "<event_receiver>" +
                          "<URL>" + configData.eventReceiverURL + "</URL>" +
                          "<Username>" + configData.eventReceiverUsername + "</Username>" +
                          "<Password>" + configData.eventReceiverPassword + "</Password>" +
                          "</event_receiver>" +
                          "<event_analyser>" +
                          "<URL>" + configData.eventAnalyserURL + "</URL>" +
                          "<Username>" + configData.eventAnalyserUsername + "</Username>" +
                          "<Password>" + configData.eventAnalyserPassword + "</Password>" +
                          "</event_analyser>" +
                          "</analytics_config>");
    var resource ={
        content: content.toXMLString(),
        mediaType: 'text/xml'
    };
    log.info("Saving Analytics config in registry...");
    registry.put(path,resource);
    log.info("Analytics config saved in registry");

    return {
        error:false
    };
};


var addDatasourceConfig = function (configData) {

    var carbon = require('carbon');
    var process = require('process');
    var conf = carbon.server.loadConfig('user-mgt.xml');
    var confXml = new XML(conf);
    var username = confXml.*::['Realm'].*::['Configuration'].*::['AdminUser'].*::['UserName'].text();
    var password = confXml.*::['Realm'].*::['Configuration'].*::['AdminUser'].*::['Password'].text();
    var url = 'https://' + process.getProperty('carbon.local.ip') + ':' + process.getProperty('mgt.transport.https.port');
    var stub = new org.wso2.carbon.ndatasource.ui.stub.NDataSourceAdminStub(url + '/services/NDataSourceAdmin');
    var client = stub._getServiceClient();
    var options = client.getOptions();
    var authenticator = new org.apache.axis2.transport.http.HttpTransportProperties.Authenticator();
    authenticator.setUsername(username);
    authenticator.setPassword(password);
    authenticator.setPreemptiveAuthentication(true);
    options.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
    client.setOptions(options);

    var jndiConfig = new org.wso2.carbon.ndatasource.ui.stub.core.xsd.JNDIConfig();
    var dsName = 'WSO2_STAT_DB';
    var dsJndiName = 'jdbc/WSO2_STAT_DB';
    jndiConfig.setName(dsJndiName);

    var configString = getDataSourceConfigString(configData).result;
    var dataSourceDefinition = new org.wso2.carbon.ndatasource.ui.stub.core.services.xsd.WSDataSourceMetaInfo_WSDataSourceDefinition();
    dataSourceDefinition.setType("RDBMS");
    dataSourceDefinition.setDsXMLConfiguration(configString);

    var dataSourceMetaInfo = new org.wso2.carbon.ndatasource.ui.stub.core.services.xsd.WSDataSourceMetaInfo();
    dataSourceMetaInfo.setName(dsName);
    dataSourceMetaInfo.setDescription("The datasource used for getting statistics to API Manager");
    dataSourceMetaInfo.setJndiConfig(jndiConfig);
    dataSourceMetaInfo.setDefinition(dataSourceDefinition);
    log.info("Saving datasource '" + dsName + "'...");
    stub.addDataSource(dataSourceMetaInfo);
    log.info("Datasource '" + dsName + "' saved");
    return {
        error:false
    };
};


var addToolbox = function (configData) {

    var process = require('process');
    var toolBoxPath = process.getProperty('carbon.home') + '/statistics';
    var toolBoxName = '';

    if ('oracle.jdbc.OracleDriver' == configData.statDsDriver) {
        toolBoxName = 'API_Manager_Analytics_Oracle.tbox';
    } else {
        toolBoxName = 'API_Manager_Analytics.tbox';
    }
    toolBoxPath = toolBoxPath + '/' + toolBoxName;
    var file = new java.io.File(toolBoxPath);

    var byteArray = org.apache.commons.io.FileUtils.readFileToByteArray(file);
    var dataHandler = new javax.activation.DataHandler(byteArray,"application/octet-stream");

    var stub = new org.wso2.carbon.bam.toolbox.deployer.stub.BAMToolboxDepolyerServiceStub(configData.eventAnalyserURL + '/services/BAMToolboxDepolyerService');
    var client = stub._getServiceClient();
    var options = client.getOptions();
    var authenticator = new org.apache.axis2.transport.http.HttpTransportProperties.Authenticator();
    authenticator.setUsername(configData.eventAnalyserUsername);
    authenticator.setPassword(configData.eventAnalyserPassword);
    authenticator.setPreemptiveAuthentication(true);
    options.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
    client.setOptions(options);
    log.info("Deploying BAM toolbox '" + toolBoxName + "'...");
    stub.uploadBAMToolBox(dataHandler, toolBoxName);
    log.info("BAM toolbox '" + toolBoxName + "' deployed");
    return {
        error:false
    };
};

var addBamServerProfile = function (configData) {

    var carbon = require('carbon');
    //org.wso2.carbon.apimgt.impl.utils.APIUtil.addBamServerProfile(configData.eventReceiverURL,
           // configData.eventReceiverUsername, configData.eventReceiverPassword, parseInt(carbon.server.tenantId()));
    return {
        error:false
    };
};

var getDataSourceConfigString = function (configData) {

    var configString = '<configuration>' +
            '<url>' + configData.statDsURL + '</url>' +
            '<username>' + configData.statDsUsername + '</username>' +
            '<password>' + configData.statDsPassword + '</password>' +
            '<driverClassName>' + configData.statDsDriver + '</driverClassName>';
    if (configData.statDsDefAutoCommit != 'select') {
        configString = configString + '<defaultAutoCommit>' + configData.statDsDefAutoCommit + '</defaultAutoCommit>';
    }
    if (configData.statDsDefReadOnly != 'select') {
        configString = configString + '<defaultReadOnly>' + configData.statDsDefReadOnly + '</defaultReadOnly>';
    }
    if (configData.statDsDefTrans != 'select') {
        configString = configString + '<defaultTransactionIsolation>' + configData.statDsDefTrans + '</defaultTransactionIsolation>';
    }
    if (configData.statDsDefCatalog != '') {
        configString = configString + '<defaultCatalog>' + configData.statDsDefCatalog + '</defaultCatalog>';
    }
    if (configData.statDsMaxActive != '') {
        configString = configString + '<maxActive>' + configData.statDsMaxActive + '</maxActive>';
    }
    if (configData.statDsMaxIdle != '') {
        configString = configString + '<maxIdle>' + configData.statDsMaxIdle + '</maxIdle>';
    }
    if (configData.statDsMinIdle != '') {
        configString = configString + '<minIdle>' + configData.statDsMinIdle + '</minIdle>';
    }
    if (configData.statDsInitialSize != '') {
        configString = configString + '<initialSize>' + configData.statDsInitialSize + '</initialSize>';
    }
    if (configData.statDsMaxWait != '') {
        configString = configString + '<maxWait>' + configData.statDsMaxWait + '</maxWait>';
    }
    if (configData.statDsTestOnBorrow != 'select') {
        configString = configString + '<testOnBorrow>' + configData.statDsTestOnBorrow + '</testOnBorrow>';
    }
    if (configData.statDsTestOnReturn != 'select') {
        configString = configString + '<testOnReturn>' + configData.statDsTestOnReturn + '</testOnReturn>';
    }
    if (configData.statDsTestWhileIdle != 'select') {
        configString = configString + '<testWhileIdle>' + configData.statDsTestWhileIdle + '</testWhileIdle>';
    }
    if (configData.statDsValidationQuery != '') {
        configString = configString + '<validationQuery>' + configData.statDsValidationQuery + '</validationQuery>';
    }
    if (configData.statDsValidationClass != '') {
        configString = configString + '<validatorClassName>' + configData.statDsValidationClass + '</validatorClassName>';
    }
    if (configData.statDsTimeEviction != '') {
        configString = configString + '<timeBetweenEvictionRunsMillis>' + configData.statDsTimeEviction + '</timeBetweenEvictionRunsMillis>';
    }
    if (configData.statDsNoOfTestsEviction != '') {
        configString = configString + '<numTestsPerEvictionRun>' + configData.statDsNoOfTestsEviction + '</numTestsPerEvictionRun>';
    }
    if (configData.statDsMinEvictableIdleTime != '') {
        configString = configString + '<minEvictableIdleTimeMillis>' + configData.statDsMinEvictableIdleTime + '</minEvictableIdleTimeMillis>';
    }
    if (configData.statDsAccessToConnAllowed != 'select') {
        configString = configString + '<accessToUnderlyingConnectionAllowed>' + configData.statDsAccessToConnAllowed + '</accessToUnderlyingConnectionAllowed>';
    }
    if (configData.statDsRemoveAbandoned != 'select') {
        configString = configString + '<removeAbandoned>' + configData.statDsRemoveAbandoned + '</removeAbandoned>';
    }
    if (configData.statDsRemoveAbandonedTimeout != '') {
        configString = configString + '<removeAbandonedTimeout>' + configData.statDsRemoveAbandonedTimeout + '</removeAbandonedTimeout>';
    }
    if (configData.statDsLogAbandoned != 'select') {
        configString = configString + '<logAbandoned>' + configData.statDsLogAbandoned + '</logAbandoned>';
    }
    if (configData.statDsConnProperties != '') {
        configString = configString + '<connectionProperties>' + configData.statDsConnProperties + '</connectionProperties>';
    }
    if (configData.statDsInitSql != '') {
        configString = configString + '<initSQL>' + configData.statDsInitSql + '</initSQL>';
    }
    if (configData.statDsJDBCInterceptors != '') {
        configString = configString + '<jdbcInterceptors>' + configData.statDsJDBCInterceptors + '</jdbcInterceptors>';
    }
    if (configData.statDsValidationInterval != '') {
        configString = configString + '<validationInterval>' + configData.statDsValidationInterval + '</validationInterval>';
    }
    if (configData.statDsFairQueue != 'select') {
        configString = configString + '<fairQueue>' + configData.statDsFairQueue + '</fairQueue>';
    }
    if (configData.statDsJMXEnabled != 'select') {
        configString = configString + '<jmxEnabled>' + configData.statDsJMXEnabled + '</jmxEnabled>';
    }
    if (configData.statDsAbandonWhenPrecFull != '') {
        configString = configString + '<abandonWhenPercentageFull>' + configData.statDsAbandonWhenPrecFull + '</abandonWhenPercentageFull>';
    }
    if (configData.statDsMaxAge != '') {
        configString = configString + '<maxAge>' + configData.statDsMaxAge + '</maxAge>';
    }
    if (configData.statDsUseEquals != 'select') {
        configString = configString + '<useEquals>' + configData.statDsUseEquals + '</useEquals>';
    }
    if (configData.statDsSuspectTimeout != '') {
        configString = configString + '<suspectTimeout>' + configData.statDsSuspectTimeout + '</suspectTimeout>';
    }
    if (configData.statDsAlternateUsernameAllowed != 'select') {
        configString = configString + '<alternateUsernameAllowed>' + configData.statDsAlternateUsernameAllowed + '</alternateUsernameAllowed>';
    }
    if (configData.statDsValidationQueryTimeout != '') {
        configString = configString + '<validationQueryTimeout>' + configData.statDsValidationQueryTimeout + '</validationQueryTimeout>';
    }

    configString = configString + '</configuration>';
    return {
        result:configString
    };
};


%>