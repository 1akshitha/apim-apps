<%

var log = new Log();
// adding apiPolicy
var addApiPolicy = function (policy) {
    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var Gson = Packages.com.google.gson.Gson;
        var gson = new Gson();
        var apiProvider = new APIProviderImpl(provider);
        var apiPolicy = jsonToObject(JSON.parse(policy));
        // log.info((apiPolicy.toString()));

        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;
        var tenantId = APIUtil.getTenantId(provider);
        // log.info(tenantId);
        apiPolicy.setTenantId(tenantId);

        log.info((apiPolicy.toString()));
        // var jobj =apiPolicy.toString();
        log.info(policy);
        log.info(objectToJson(apiPolicy));
        apiProvider.addPolicy(apiPolicy);
        return {
            error: false
        };
    } catch (ex) {
        var errorMessage = "Error occurred while saving policy (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
}


var getAllAPIPolicies = function () {
    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);

        var apiPolicies = apiProvider.getPolicies(provider, "api");
        return {
            error: false,
            apiPolicies: apiPolicies
        };
    } catch (ex) {
        var errorMessage = "Error occurred while getting all api policies (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
};

//get api policy with policyName
var getAPIPolicy = function (policyName) {
    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);
        var apiPolicy = apiProvider.getAPIPolicy(policyName, provider);
        return {
            error: false,
            apiPolicy: apiPolicy
        };
    } catch (ex) {
        var errorMessage = "Error occurred while getting all api policies (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
};

//get api policy with policyName
var getAPIPolicyJson = function (policyName) {
    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);
        var apiPolicy = apiProvider.getAPIPolicy(policyName, provider);
        apiPolicy = objectToJson(apiPolicy);
        return {
            error: false,
            apiPolicy: apiPolicy
        };
    } catch (ex) {
        var errorMessage = "Error occurred while getting all api policies (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
};

//removing api policy
var deleteAPIPolicy = function (policyName, userName, policyLevel) {

    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);

        var apiPolicies = apiProvider.deletePolicy(provider, "api", policyName);
        return {
            error: false,
            apiPolicies: apiPolicies
        };

    } catch (ex) {
        var errorMessage = "Error occurred while deleting the policy (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }

}

//update api policy
var updateApiPolicy = function (policy) {

    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);

        var updatedPolicy = jsonToObject(policy);
        apiProvider.updatePolicy(policy);
        return {
            error: false
        };

    } catch (ex) {
        var errorMessage = "Error occurred while updating the policy (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
};

var getExecutionFlowTemplate = function () {
    var executionFlow = {
        "id": 0,
        "enabled": false,
        "quotaPolicy": {
            "type": "",
            "limit": {
                "requestCount": 0,
                "timeUnit": "",
                "dataAmount": 0,
                "dataUnit": ""
            }
        },
        "conditions": [
            {
                "type": "IP",
                "ipType": "specific",
                "startingIP": "",
                "endingIP": "",
                "specificIP": "",
                "invertCondition": false,
                "enabled": false
            },
            {
                "type": "Header",
                "keyValPairs": [],
                "invertCondition": false,
                "enabled": false
            },
            {
                "type": "QueryParam",
                "keyValPairs": [],
                "invertCondition": false,
                "enabled": false
            },
            {
                "type": "JWTClaim",
                "keyValPairs": [],
                "invertCondition": false,
                "hasValues": false,
                "enabled": false
            }
        ]
    };
    return executionFlow;
};

// inserting json file data to ApiPolicy Object
var jsonToObject = function (policy) {

    try {

        var APIPolicy = Packages.org.wso2.carbon.apimgt.api.model.policy.APIPolicy;
        var IPCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.IPCondition;
        var IPRangeCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.IPRangeCondition;
        var DateCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.DateCondition;
        var DateRangeCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.DateRangeCondition;
        var HeaderCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.HeaderCondition;
        var HTTPVerbCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.HTTPVerbCondition;
        var JWTClaimsCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.JWTClaimsCondition;
        var QueryParameterCondition = Packages.org.wso2.carbon.apimgt.api.model.policy.QueryParameterCondition;
        var Limit = Packages.org.wso2.carbon.apimgt.api.model.policy.Limit;
        var RequestCountLimit = Packages.org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit;
        var BandwidthLimit = Packages.org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit;
        var Pipeline = Packages.org.wso2.carbon.apimgt.api.model.policy.Pipeline;
        var QuotaPolicy = Packages.org.wso2.carbon.apimgt.api.model.policy.QuotaPolicy;
        var ArrayList = Packages.java.util.ArrayList;
        // Extracting basic policy info
        var policyName = policy.policyName;
        var policyLevel = policy.policyLevel;
        var policyDescription = policy.policyDescription;
        var i = 0;    //to iterate through execution flows
        var pipeline = policy.executionFlows;
        var apiPolicyobj = new APIPolicy(policyName);
        apiPolicyobj.setUserLevel(policyLevel);
        apiPolicyobj.setDescription(policyDescription);
        //exract pipeline info
        log.info("start");
        var isPipelinePresent = false;
        while (pipeline[i]) {
            isPipelinePresent = true;
            var pipe = new Pipeline();
            var quotaPolicy = new QuotaPolicy();
            var limit = new Limit();
            var requestCountLimit = new RequestCountLimit();
            var bandwidthLimit = new BandwidthLimit();
            var enabled = pipeline[i].enabled;
            var quotaPolicyType = pipeline[i].quotaPolicy.type;

            var requestCount = pipeline[i].quotaPolicy.limit.requestCount;
            var timeUnit = pipeline[i].quotaPolicy.limit.timeUnit;
            var dataAmount = pipeline[i].quotaPolicy.limit.dataAmount;
            var dataUnit = pipeline[i].quotaPolicy.limit.dataUnit;

            var id = pipeline[i].id;

            var conditionsList = new ArrayList();

            pipe.setEnabled(enabled);

            quotaPolicy.setType(quotaPolicyType);

            if (quotaPolicyType == "requestCount") {
                requestCountLimit = new RequestCountLimit();
                requestCountLimit.setRequestCount(requestCount);
                requestCountLimit.setTimeUnit(timeUnit);
                quotaPolicy.setLimit(requestCountLimit);
            } else if (quotaPolicyType == "bandwidthVolume") {
                bandwidthLimit = new BandwidthLimit();
                bandwidthLimit.setDataAmount(dataAmount);
                bandwidthLimit.setDataUnit(dataUnit);
                quotaPolicy.setLimit(bandwidthLimit);
            }
            pipe.setQuotaPolicy(quotaPolicy);
            var j = 0;   //to iterate through conditions
            var condition = pipeline[i].conditions;
            var pipeLines = new ArrayList();
            var l = 0;
            var m = 0;
            var k = 0;
            //extract conditions within a pipeline
            while (condition[j]) {
                var type = condition[j].type;
                var invertCondition = condition[j].invertCondition;
                var conditionEnabled = condition[j].enabled;

                if (type == "IP") {
                    var ipType = condition[j].ipType;
                    var startingIP = condition[j].startingIP;
                    var endingIP = condition[j].endingIP;
                    var specificIP = condition[j].specificIP;
                    //check if the IP is specific
                    if (ipType == "specific" && conditionEnabled) {
                        var ipSpecific = new IPCondition("IPSpecific");
                        ipSpecific.setSpecificIP(specificIP);
                        ipSpecific.setInvertCondition(invertCondition);
                        ipSpecific.setConditionEnabled(conditionEnabled);
                        conditionsList.add(ipSpecific);
                    } else if (ipType = "range" && conditionEnabled) {  //if IP range is given
                        var ipRange = new IPCondition("IPRange");
                        ipRange.setStartingIP(startingIP);
                        ipRange.setEndingIP(endingIP);
                        ipRange.setInvertCondition(invertCondition);
                        ipRange.setConditionEnabled(conditionEnabled);
                        conditionsList.add(ipRange);
                    }
                } else if (type == "Date" & conditionEnabled) {
                    var dateType = condition[j].dateType;
                    var startingDate = condition[j].startingDate;
                    var endingDate = condition[j].endingDate;
                    var specificDate = condition[j].specificDate;
                    //if the date is specific
                    if (dateType == "specific" && conditionEnabled) {
                        var dateSpecific = new DateCondition();
                        dateSpecific.setSpecificDate(specificDate);
                        dateSpecific.setInvertCondition(invertCondition);
                        dateSpecific.setConditionEnabled(conditionEnabled);
                        conditionsList.add(dateSpecific);
                    } else if (dateType == "range" && conditionEnabled) { //id date range is given
                        var dateRange = new DateRangeCondition();
                        dateRange.setStartingDate(startingDate);
                        dateRange.setEndingDate(endingDate);
                        dateRange.setInvertCondition(invertCondition);
                        dateRange.setConditionEnabled(conditionEnabled);
                        conditionsList.add(dateRange);
                    }
                }
                else if (type == "JWTClaim" && conditionEnabled) {
                    var claimUrl;
                    var attribute;
                    var hasValues = condition[j].hasValues;
                    while (condition[j].keyValPairs[l]) {
                        var jwtObj = new JWTClaimsCondition();
                        claimUrl = condition[j].keyValPairs[l].name;
                        attribute = condition[j].keyValPairs[l].value;
                        jwtObj.setClaimUrl(claimUrl);
                        jwtObj.setAttribute(attribute);
                        jwtObj.setInvertCondition(invertCondition);
                        jwtObj.setConditionEnabled(enabled);
                        conditionsList.add(jwtObj);
                        l++;
                    }

                } else if (type == "Header" && conditionEnabled) {
                    var headerName;
                    var headerVal;
                    while (condition[j].keyValPairs[k]) {
                        headerName = condition[j].keyValPairs[k].name;
                        headerVal = condition[j].keyValPairs[k].value;
                        var headerObj = new HeaderCondition();
                        headerObj.setHeader(headerName);
                        headerObj.setValue(headerVal);
                        headerObj.setInvertCondition(invertCondition);
                        headerObj.setConditionEnabled(enabled);
                        conditionsList.add(headerObj);
                        k++;
                    }


                } else if (type == "HTTPVerb" && conditionEnabled) {
                    var httpVerb = condition[j].httpVerb;

                    var httpVerbObj = new HTTPVerbCondition();
                    httpVerbObj.setHttpVerb(httpVerb);
                    httpVerbObj.setInvertCondition(invertCondition);
                    httpVerbObj.setConditionEnabled(enabled);
                    conditionsList.add(httpVerbObj);

                } else if (type == "QueryParam" && conditionEnabled) {
                    var param;
                    var value;
                    while (condition[j].keyValPairs[m]) {
                        param = condition[j].keyValPairs[m].name;
                        value = condition[j].keyValPairs[m].value;
                        var queryParamObj = new QueryParameterCondition();
                        queryParamObj.setParameter(param);
                        queryParamObj.setValue(value);
                        queryParamObj.setInvertCondition(invertCondition);
                        queryParamObj.setConditionEnabled(enabled);
                        conditionsList.add(queryParamObj);
                        m++;
                    }

                }
                j++;
            }

            //end of extracting conditions of a pipline
            //adding conditions to pipe
            pipe.setConditions(conditionsList);
            //adding pipe to pipelines object
            pipeLines.add(pipe);
            i++;
        }
        //end of pipeline info extracttion
        //adding pipelines to policy if pipeline/executionflow is presented
        if (isPipelinePresent == true) {
            apiPolicyobj.setPipelines(pipeLines);
        }
        //default quota policy details
        var defaultQuotaPolicy = new QuotaPolicy();
        var defaultQuotaPolicyType = policy.defaultQuotaPolicy.type;
        var defaultRequestCount = policy.defaultQuotaPolicy.limit.requestCount;
        var defaultTimeUnit = policy.defaultQuotaPolicy.limit.timeUnit;
        var defaultDataAmount = policy.defaultQuotaPolicy.limit.dataAmount;
        var defaultDataUnit = policy.defaultQuotaPolicy.limit.dataUnit;
        defaultQuotaPolicy.setType(defaultQuotaPolicyType);
        if (defaultQuotaPolicyType == "requestCount") {
            requestCountLimit = new RequestCountLimit();
            requestCountLimit.setRequestCount(defaultRequestCount);
            requestCountLimit.setTimeUnit(defaultTimeUnit);
            defaultQuotaPolicy.setLimit(requestCountLimit);
        } else if (defaultQuotaPolicyType == "bandwidthVolume") {
            bandwidthLimit = new BandwidthLimit();
            bandwidthLimit.setDataAmount(defaultDataAmount);
            bandwidthLimit.setDataUnit(defaultDataUnit);
            defaultQuotaPolicy.setLimit(bandwidthLimit);
        }
        apiPolicyobj.setDefaultQuotaPolicy(defaultQuotaPolicy);
        return apiPolicyobj;
    } catch (ex) {
        var errorMessage = "Error occurred while adding policy";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
};



var objectToJson = function (policy) {
    var apiPolicy =
    {
        "policyName": "",
        "policyLevel": "",
        "policyDescription": "",
        "executionFlows": [],
        "defaultQuotaPolicy": {
            "type": "",
            "limit": {
                "requestCount": 0,
                "timeUnit": "",
                "dataAmount": 0,
                "dataUnit": ""
            }
        }
    };



    var keyValPairs = {
        "name": "",
        "value": ""
    };

    var ArrayList = Packages.java.util.ArrayList;
    var pipes;
    apiPolicy.policyName = policy.getPolicyName();
    apiPolicy.policyLevel = policy.getUserLevel();
    apiPolicy.policyDescription = policy.getDescription();
    var type = policy.getDefaultQuotaPolicy().getType();
    apiPolicy.defaultQuotaPolicy.type = type;
    if (type == "requestCount") {
        apiPolicy.defaultQuotaPolicy.limit.requestCount = policy.getDefaultQuotaPolicy().getLimit().getRequestCount();
        apiPolicy.defaultQuotaPolicy.limit.unitTime = policy.getDefaultQuotaPolicy().getLimit().getUnitTime();
        apiPolicy.defaultQuotaPolicy.limit.timeUnit = policy.getDefaultQuotaPolicy().getLimit().getTimeUnit();
    }
    else if (type == "bandwidthVolume") {
        apiPolicy.defaultQuotaPolicy.limit.dataAmount = policy.getDefaultQuotaPolicy().getLimit().getDataAmount();
        apiPolicy.defaultQuotaPolicy.limit.dataUnit = policy.getDefaultQuotaPolicy().getLimit().getDataUnit();
        apiPolicy.defaultQuotaPolicy.limit.unitTime = policy.getDefaultQuotaPolicy().getLimit().getUnitTime();
        apiPolicy.defaultQuotaPolicy.limit.timeUnit = policy.getDefaultQuotaPolicy().getLimit().getTimeUnit();
    }
    else {
        var errorMsg = "Error occured while retrieving details";
    }
    var executionFlow;
    pipes = policy.getPipelines();
    var pipe;
    //if executionflows are included
    if (pipes != null) {
        for (var i = 0; i < pipes.size(); i++) {
            executionFlow = getExecutionFlowTemplate();
            pipe = pipes.get(i);
            executionFlow.id = pipe.getId();
            type = pipe.getQuotaPolicy().getType();
            if (type == "requestCount") {
                executionFlow.quotaPolicy.type = type;
                executionFlow.quotaPolicy.limit.requestCount = pipe.getQuotaPolicy().getLimit().getRequestCount();
                executionFlow.quotaPolicy.limit.unitTime = pipe.getQuotaPolicy().getLimit().getUnitTime();
                executionFlow.quotaPolicy.limit.timeUnit = pipe.getQuotaPolicy().getLimit().getTimeUnit();
            }
            else if (type == "bandwidthVolume") {
                executionFlow.quotaPolicy.type = type;
                executionFlow.quotaPolicy.limit.dataAmount = pipe.getQuotaPolicy().getLimit().getDataAmount();
                executionFlow.quotaPolicy.limit.dataUnit = pipe.getQuotaPolicy().getLimit().getDataUnit();
                executionFlow.quotaPolicy.limit.unitTime = pipe.getQuotaPolicy().getLimit().getUnitTime();
                executionFlow.quotaPolicy.limit.timeUnit = pipe.getQuotaPolicy().getLimit().getTimeUnit();
            }

            var conditions;
            conditions = pipes.get(i).getConditions();
            for (var j = 0; j < conditions.size(); j++) {
                if (conditions.get(j).getType() == "IPSpecific") {
                    executionFlow.conditions[0].type = "IP";
                    executionFlow.conditions[0].ipType = "specific";
                    executionFlow.conditions[0].specificIP = conditions.get(j).getSpecificIP();
                    executionFlow.conditions[0].invertCondition = conditions.get(j).isInvertCondition();
                    executionFlow.conditions[0].enabled = conditions.get(j).getConditionEnabled();

                } else if (conditions.get(j).getType() == "IPRange") {
                    executionFlow.conditions[0].type = "IP";
                    executionFlow.conditions[0].ipType = "range";
                    executionFlow.conditions[0].startingIP = conditions.get(j).getStartingIP();
                    executionFlow.conditions[0].endingIP = conditions.get(j).getEndingIP();
                    executionFlow.conditions[0].invertCondition = conditions.get(j).isInvertCondition();
                    executionFlow.conditions[0].enabled = conditions.get(j).getConditionEnabled();

                } else if (conditions.get(j).getType() == "Header") {
                    executionFlow.conditions[1].type = "Header";
                    keyValPairs.name = conditions.get(j).getJWTClaim();
                    keyValPairs.value = conditions.get(j).getValue();
                    executionFlow.conditions[1].keyValPairs.push(keyValPairs);
                    executionFlow.conditions[1].invertCondition = conditions.get(j).isInvertCondition();
                    executionFlow.conditions[1].enabled = conditions.get(j).getConditionEnabled();

                } else if (conditions.get(j).getType() == "QueryParameterType") {
                    executionFlow.conditions[2].type = "QueryParam";
                    keyValPairs.name = conditions.get(j).getParameter();
                    keyValPairs.value = conditions.get(j).getValue();
                    executionFlow.conditions[2].keyValPairs.push(keyValPairs);
                    executionFlow.conditions[2].invertCondition = conditions.get(j).isInvertCondition();
                    executionFlow.conditions[2].enabled = conditions.get(j).getConditionEnabled();

                } else if (conditions.get(j).getType() == "JWTClaims") {
                    executionFlow.conditions[3].type = "JWTClaim";
                    keyValPairs.name = conditions.get(j).getJWTClaim();
                    keyValPairs.value = conditions.get(j).getValue();
                    executionFlow.conditions[3].keyValPairs.push(keyValPairs);
                    executionFlow.conditions[3].invertCondition = conditions.get(j).isInvertCondition();
                    executionFlow.conditions[3].enabled = conditions.get(j).getConditionEnabled();
                }
            }
            apiPolicy.executionFlows.push(executionFlow);
        }
    }
    log.info(apiPolicy);
    return apiPolicy;
};
%>
