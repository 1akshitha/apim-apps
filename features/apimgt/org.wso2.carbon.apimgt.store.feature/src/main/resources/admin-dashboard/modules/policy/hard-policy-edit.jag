<%
var log = new Log();

var saveHardPolicy = function (action, policyName, description, defaultRequestCount, defaultUnitTime, defaultTimeUnit) {
    try {

    log.info("Inside method saveHardPolicy inside modules/policy");
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);

        var policy = constructPolicyObject(provider, policyName, description, defaultRequestCount,defaultUnitTime, defaultTimeUnit);

        if (action == "add") {
            apiProvider.addPolicy(policy);
        } else if (action == "update") {
            apiProvider.updatePolicy(policy);
        }
        log.info(policy.toString());
        return {
            error: false
        };
    } catch (ex) {
        var errorMessage = "Error occurred while saving policy (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
};

var constructPolicyObject = function (userName, policyName, description,defaultRequestCount,defaultUnitTime, defaultTimeUnit) {
    var HardThrottlingPolicy = Packages.org.wso2.carbon.apimgt.api.model.policy.HardThrottlingPolicy;
    var QuotaPolicy = Packages.org.wso2.carbon.apimgt.api.model.policy.QuotaPolicy;
    var RequestCountLimit = Packages.org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit;
    var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

    var hardPolicy = new HardThrottlingPolicy(policyName);

    hardPolicy.setPolicyName(policyName);
    hardPolicy.setDescription(description);

    var tenantId = APIUtil.getTenantId(userName);
    hardPolicy.setTenantId(tenantId);

    var default_quotaPolicy = new QuotaPolicy();
    default_quotaPolicy.setType("requestCount");
        var requestCountLimit = new RequestCountLimit();
        requestCountLimit.setRequestCount(defaultRequestCount);
        requestCountLimit.setUnitTime(defaultUnitTime);
        requestCountLimit.setTimeUnit(defaultTimeUnit);
        default_quotaPolicy.setLimit(requestCountLimit);
    
    
    hardPolicy.setDefaultQuotaPolicy(default_quotaPolicy);

    return hardPolicy;
}
%>
